# Copyright (c) Brandon Pacewic
# SPDX-License-Identifier: MIT

# This script generates the CMakeLists.txt file used for compiling each of the static tests.

import os
import sys
from typing import List, Tuple

FILE_AUTOGEN_WARNING = """# THIS FILE WAS AUTOGENERATED BY create_test_cmake.py.
# DO NOT ATTEMPT TO EDIT THIS FILE MANUALLY.
"""

CMAKE_FILE_SETUP_TOP = """\n# Copyright (c) Brandon Pacewic
# SPDX-License-Identifier: MIT

set(CPL_CORE_DIR ${CMAKE_SOURCE_DIR}/out/build/x64-Debug/cpl/cpl.lib)
add_library(cpl_core STATIC IMPORTED)
set_target_properties(cpl_core PROPERTIES IMPORTED_LOCATION ${CPL_CORE_DIR})\n
"""

CMAKE_FILE_SETUP_BOTTOM = "include_directories(BEFORE ${CMAKE_SOURCE_DIR}/cpl/inc)\n\n"

def get_test_cmake_string(test_name: str, test_dir: str) -> str:
    return f"""add_executable({test_name} {test_dir}/test.compile.run.cpp)
target_link_libraries({test_name} cpl_core)\n
"""


def generate_cmake_file(cpl_tests: List[Tuple]) -> str:
    cmake_file = FILE_AUTOGEN_WARNING + CMAKE_FILE_SETUP_TOP
    for test in cpl_tests:
        cmake_file += get_test_cmake_string(test[0], test[1])
    cmake_file += CMAKE_FILE_SETUP_BOTTOM + FILE_AUTOGEN_WARNING
    return cmake_file


def main():
    if len(sys.argv) != 2:
        print("Usage: create_cmake_test.py <path to the tests directory>")
        print("Used to generate the CMakeLists.txt file for the static tests.")
        sys.exit(1)

    os.chdir(sys.argv[1])
    cpl_tests = []
    for root, _, files in os.walk("."):
        if "test.compile.run.cpp" in files:
            print(f"Found test: {root}")
            if sys.platform.startswith("linux"):
                cpl_tests.append((root.split("/")[-1], root))
            elif sys.platform.startswith("win32"):
                root = root.replace("\\", "/")
                cpl_tests.append((root.split("/")[-1], root))

    cmake_file_str = generate_cmake_file(cpl_tests)
    with open("CMakeLists.txt", "w") as file:
        file.write(cmake_file_str)

    print("New CMake file successfully generated.")


if __name__ == "__main__":
    main()
